#!/usr/bin/env python3
"""
Perplexity Integration - AI Research Assistant
==============================================

Learn how to use AI for intelligent research using Perplexity AI.
Perfect for building AI that can gather real-time information!

What you'll learn:
    - How to do AI-powered research
    - How to get current, accurate information
    - Building research assistants

Usage:
    python 7_perplexity_integration.py

Note: You'll need to connect Perplexity integration in your dashboard first.
"""

import os
import requests
from dotenv import load_dotenv

# Load your API key from .env file
load_dotenv()

def do_ai_research(question):
    """Use Perplexity AI to research a question."""
    
    api_key = os.getenv('INCREDIBLE_API_KEY')
    user_id = os.getenv('USER_ID')
    
    if not api_key or not user_id:
        print("‚ùå Missing API credentials! Check your .env file")
        return None
    
    print("üîç AI Research in Progress")
    print("-" * 40)
    
    # Perplexity integration endpoint
    url = "https://api.incredible.one/v1/integrations/perplexity/execute"
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {api_key}'
    }
    
    data = {
        "user_id": user_id,
        "feature_name": "PERPLEXITY_SEARCH",
        "inputs": {
            "query": question
        }
    }
    
    try:
        print(f"üîé Researching: {question}")
        print("‚è≥ AI is searching the internet...")
        
        response = requests.post(url, json=data, headers=headers)
        response.raise_for_status()
        
        result = response.json()
        research_answer = result.get('result', {}).get('answer', 'No answer found')
        sources = result.get('result', {}).get('sources', [])
        
        print("‚úÖ Research complete!")
        print()
        print("üìÑ Research Results:")
        print("=" * 50)
        print(research_answer)
        print("=" * 50)
        
        if sources:
            print()
            print("üîó Sources:")
            for i, source in enumerate(sources[:3], 1):  # Show first 3 sources
                print(f"   {i}. {source.get('title', 'Unknown')}")
                if source.get('url'):
                    print(f"      {source['url']}")
        
        return research_answer
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Research failed")
        print(f"üîç Error: {e}")
        print()
        print("üîß Troubleshooting:")
        print("   1. Make sure Perplexity integration is connected in your dashboard")
        print("   2. Check your internet connection")
        print("   3. Try a different research question")
        print("   4. Verify your Perplexity API key is valid")
        return None

def research_examples():
    """Show different types of research questions."""
    print("üìö Research Examples")
    print("-" * 40)
    
    # Example questions to demonstrate different research types
    example_questions = [
        "What are the latest developments in renewable energy 2024?",
        "How does ChatGPT work in simple terms?", 
        "What are the current stock market trends?",
        "Best practices for Python programming 2024"
    ]
    
    print("Here are some example research questions:")
    for i, question in enumerate(example_questions, 1):
        print(f"   {i}. {question}")
    
    print()
    
    # Let user pick or enter their own
    choice = input("Enter a number (1-4) or type your own question: ").strip()
    
    if choice.isdigit() and 1 <= int(choice) <= len(example_questions):
        question = example_questions[int(choice) - 1]
    elif choice:
        question = choice
    else:
        question = example_questions[0]  # Default
    
    print()
    return do_ai_research(question)

def show_perplexity_setup_help():
    """Show users how to set up Perplexity integration."""
    print("üîß Perplexity Integration Setup")
    print("-" * 40)
    print()
    print("To use Perplexity research, you need to:")
    print()
    print("1. üåê Go to your Incredible API dashboard")
    print("   ‚Üí https://incredible.one/dashboard")
    print()
    print("2. üîå Find the 'Integrations' section")
    print()
    print("3. üîç Click 'Connect Perplexity'")
    print()
    print("4. üîë Enter your Perplexity API key")
    print("   ‚Üí Get one from https://www.perplexity.ai/settings/api")
    print()
    print("5. ‚úÖ Save and come back to run this script")
    print()
    print("üí° Why Perplexity? It's an AI search engine that gives you")
    print("   accurate, up-to-date information with sources!")

def main():
    """Test Perplexity research integration."""
    print("üîç Perplexity Integration - AI Research Assistant")
    print("=" * 60)
    print("Let's teach AI to do research!")
    print()
    
    # Try to do research
    result = research_examples()
    
    print()
    
    if result:
        print("üéä Amazing! Your AI can now do research!")
        print()
        print("üöÄ What you can build:")
        print("   üìä Market research bots")
        print("   üì∞ News summarization services") 
        print("   üéì Study assistants that find information")
        print("   üìà Trend analysis tools")
        print("   üî¨ Competitive intelligence systems")
        print("   üìö Content research for writing")
    else:
        print("‚ö†Ô∏è  Perplexity integration not set up yet")
        print()
        show_perplexity_setup_help()
    
    print()
    print("üèÅ Congratulations! Tutorial Complete!")
    print()
    print("You've now learned all the Incredible API fundamentals:")
    print("   ‚úÖ 1. Basic chat completion")
    print("   ‚úÖ 2. Multiple models")
    print("   ‚úÖ 3. Conversations")
    print("   ‚úÖ 4. Streaming responses") 
    print("   ‚úÖ 5. Function calling")
    print("   ‚úÖ 6. Gmail integration")
    print("   ‚úÖ 7. Research integration")
    print()
    print("üöÄ You're ready to build incredible AI applications!")

if __name__ == "__main__":
    main()
